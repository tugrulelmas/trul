<#@ include file="$(SolutionDir)Trul.Framework\Trul.ttinclude" #>
<#@ assembly name="$(SolutionDir)Trul.Domain\$(OutDir)Trul.Domain.dll" #>
<#@ assembly name="$(SolutionDir)Trul.Domain.Core\$(OutDir)Trul.Domain.Core.dll" #>
<#         
var type = typeof(Trul.Domain.Core.IEntityWithTypedId<>);
var types = AppDomain.CurrentDomain.GetAssemblies().ToList()
    .SelectMany(s => s.GetTypes())
    .Where(p => p.GetInterface(type.FullName) != null && !p.IsInterface
	       && !new string[]{"Entity", "DelEntity", "EntityWithTypedId`1", "DelEntityWithTypedId`1"}.Contains(p.Name));

foreach(var item in types) {
	GenerateIRepository(item.Name, item.GetProperty("ID").PropertyType.Name);	

	string fileName = string.Format("I{0}Service.cs", item.Name);
	string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
	string outputFilePath = Path.Combine(templateDirectory, fileName);
	SaveOutput(fileName);
	AddFileToProject(outputFilePath);  
}
#>

<#+
    void GenerateIRepository(string entityName, string idType)
    {
#>
/*
	Automatik generate edilen service interface. Burada değişiklik yapmayın!
*/

using System;
using Trul.Application.DTO;
using Trul.Service;

namespace Trul.Service.Core
{
    /// <summary>
    /// I<#=entityName#>Service
    /// </summary>
    public partial interface I<#=entityName#>Service : IRepositoryService<<#=entityName#>DTO, <#=idType#>>
    {

    }
}
<#+
}
#>